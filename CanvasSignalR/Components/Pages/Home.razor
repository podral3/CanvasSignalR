@page "/"
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client

<PageTitle>Canvas App - Home</PageTitle>

<div class="home-container">
    <div class="header">
        <h1>🎨 Canvas Collaboration App</h1>
        <p class="subtitle">Create or join a shared canvas to draw and chat in real-time</p>
    </div>

    <div class="actions-section">
        <button @onclick="ShowPopup" class="create-btn">
            <span>➕</span>
            Create New Canvas
        </button>
    </div>

    <div class="canvases-section">
        <h2>Available Canvases</h2>
    
        @if (canvasNames.Count == 0)
        {
            <div class="empty-state">
                <p>🖼️ No canvases available yet</p>
                <p class="empty-subtitle">Create a new canvas to get started!</p>
            </div>
        }
        else
        {
            <ul class="canvas-list">
                @foreach (var canvas in canvasNames)
                {
                    <li class="canvas-item">
                        <div class="canvas-info">
                            <span class="canvas-icon">🎨</span>
                            <span class="canvas-name">@canvas</span>
                        </div>
                        <button @onclick="() => JoinCanvas(canvas)" class="join-btn">
                            Join →
                        </button>
                    </li>
                }
            </ul>
        }
    </div>
</div>

@if (showPopup)
{
    <InputPopup OnClose="HidePopup"/>
}

@code {
    private HubConnection hubConnection;
    private List<string> canvasNames = [];

    private bool showPopup = false;
    private void ShowPopup() 
    {
        showPopup = true;
        StateHasChanged();
    }
    private void HidePopup()
    {
        showPopup = false;
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/canvasHub"))
      .Build();

        hubConnection.On<List<string>>("GetCanvases", (canvasList) =>
        {
      canvasNames = canvasList;
        StateHasChanged();
        });

  await hubConnection.StartAsync();

        canvasNames = await hubConnection.InvokeAsync<List<string>>("GetCanvases");
        StateHasChanged();
    }
     
    private void JoinCanvas(string canvasName)
    {
        Navigation.NavigateTo($"/canvas/{canvasName}");
    }
}
