@page "/Error"
@using System.Diagnostics

<PageTitle>Error</PageTitle>

<div class="error-container">
    <div class="error-content">
        <div class="error-icon">⚠️</div>
     <h1>Oops! Something Went Wrong</h1>
        <p class="error-message">An error occurred while processing your request.</p>

@if (ShowRequestId)
        {
    <div class="request-info">
         <strong>Request ID:</strong> <code>@RequestId</code>
      </div>
        }

        <div class="error-actions">
    <a href="/" class="btn-home">← Go to Home</a>
         <button @onclick="ReloadPage" class="btn-reload">🔄 Reload Page</button>
     </div>

        <div class="dev-info">
   <h3>Development Mode Information</h3>
 <p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
    </p>
   <div class="warning-box">
   <strong>⚠️ Important:</strong> The Development environment shouldn't be enabled for deployed applications.
       It can result in displaying sensitive information from exceptions to end users.
   </div>
     <p class="dev-instructions">
For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> 
                environment variable to <strong>Development</strong> and restarting the app.
     </p>
        </div>
    </div>
</div>

@code{
    [CascadingParameter]
  private HttpContext? HttpContext { get; set; }

    private string? RequestId { get; set; }
 private bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    protected override void OnInitialized() =>
        RequestId = Activity.Current?.Id ?? HttpContext?.TraceIdentifier;

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    @inject NavigationManager Navigation
}
